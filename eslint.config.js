const { FlatCompat } = require('@eslint/eslintrc');
const tsParser = require('@typescript-eslint/parser');
const pluginJest = require('eslint-plugin-jest');
const path = require('path');
const compat = new FlatCompat();

module.exports = [
    // Handle legacy "extends" using FlatCompat
    ...compat.extends('plugin:react/recommended'),
    ...compat.extends('plugin:import/recommended'),
    ...compat.extends('plugin:regexp/recommended'),
    ...compat.extends('plugin:@typescript-eslint/recommended'),
    ...compat.extends('plugin:perfectionist/recommended-natural-legacy'),
    ...compat.extends('plugin:promise/recommended'),

    // TypeScript-specific configuration
    {
        files: ['*.ts', '*.tsx'],
        languageOptions: {
            ecmaVersion: 2020,
            parser: tsParser,
            sourceType: 'module',
        },
        rules: {
            '@typescript-eslint/no-unused-vars': [
                'warn',
                {
                    args: 'after-used',
                    argsIgnorePattern: '^_',
                    vars: 'all',
                    varsIgnorePattern: '^_',
                },
            ],
            '@typescript-eslint/no-var-requires': 'off',
        },
    },

    // JSX-specific configuration
    {
        files: ['*.tsx', '*.jsx'],
        languageOptions: {
            ecmaFeatures: {
                jsx: true,
            },
            ecmaVersion: 2020,
            sourceType: 'module',
        },
        plugins: {
            '@react-native': require('@react-native/eslint-plugin'),
            'eslint-comments': require('eslint-plugin-eslint-comments'),
            import: require('eslint-plugin-import'),
            jest: require('eslint-plugin-jest'),
            perfectionist: require('eslint-plugin-perfectionist'),
            react: require('eslint-plugin-react'),
            'react-hooks': require('eslint-plugin-react-hooks'),
            regexp: require('eslint-plugin-regexp'),
            'unused-imports': require('eslint-plugin-unused-imports'),
        },
        rules: {
            '@typescript-eslint/no-unused-vars': 'off',
            '@typescript-eslint/no-var-requires': 'off',
            // JavaScript and JSX-specific rules from old config can be added here
        },
    },

    // General configuration
    {
        languageOptions: {
            ecmaVersion: 2020,
            globals: {
                ...pluginJest.environments.globals.globals,
                __DEV__: true,
                __dirname: true,
                __fbBatchedBridgeConfig: false,
                AbortController: false,
                alert: false,
                Blob: true,
                cancelAnimationFrame: false,
                cancelIdleCallback: false,
                clearImmediate: true,
                clearInterval: false,
                clearTimeout: false,
                console: false,
                document: false,
                ErrorUtils: false,
                escape: false,
                Event: false,
                EventTarget: false,
                exports: false,
                fetch: false,
                File: true,
                FileReader: false,
                FormData: false,
                global: false,
                Headers: false,
                Intl: false,
                Map: true,
                module: false,
                navigator: false,
                process: false,
                Promise: true,
                queueMicrotask: true,
                requestAnimationFrame: true,
                requestIdleCallback: true,
                require: false,
                Set: true,
                setImmediate: true,
                setInterval: false,
                setTimeout: false,
                URL: false,
                URLSearchParams: false,
                WebSocket: true,
                window: false,
                XMLHttpRequest: false,
            },
            sourceType: 'module',
        },
        plugins: {
            '@react-native': require('@react-native/eslint-plugin'),
            'eslint-comments': require('eslint-plugin-eslint-comments'),
            import: require('eslint-plugin-import'),
            jest: require('eslint-plugin-jest'),
            perfectionist: require('eslint-plugin-perfectionist'),
            promise: require('eslint-plugin-promise'),
            react: require('eslint-plugin-react'),
            'react-hooks': require('eslint-plugin-react-hooks'),
            regexp: require('eslint-plugin-regexp'),
            'unused-imports': require('eslint-plugin-unused-imports'),
        },
        rules: {
            '@typescript-eslint/ban-ts-comment': 'off', // TODO maybe turn it on one day
            '@typescript-eslint/no-empty-object-type': 'warn',
            '@typescript-eslint/no-explicit-any': 'off', // TODO maybe turn it on one day
            '@typescript-eslint/no-non-null-asserted-optional-chain': 'warn', // TODO maybe turn it on one day
            '@typescript-eslint/no-require-imports': 'off',
            '@typescript-eslint/no-unused-vars': 'warn',
            'array-bracket-spacing': ['warn', 'never'],
            'arrow-parens': ['warn', 'always'],
            camelcase: 'off',
            'comma-dangle': ['warn', {
                'arrays': 'always-multiline',
                'exports': 'always-multiline',
                'functions': 'never',
                'imports': 'always-multiline',
                'objects': 'always-multiline',
            }],
            'comma-spacing': 'off',
            'consistent-return': 'off',
            curly: 'warn',
            'default-case': 'off',
            'dot-notation': 'warn',
            eqeqeq: ['warn', 'allow-null'],
            'eslint-comments/no-aggregating-enable': 'warn',
            'eslint-comments/no-unlimited-disable': 'warn',
            'eslint-comments/no-unused-disable': 'warn',
            'eslint-comments/no-unused-enable': 'warn',
            indent: ['warn', 4, { SwitchCase: 1 }],
            'jest/no-disabled-tests': 'warn',
            'jest/no-focused-tests': 'warn',
            'jest/no-identical-title': 'warn',
            'jest/valid-expect': 'warn',
            'key-spacing': 'off',
            'max-len': 'off',
            'max-params': 'off',
            'no-alert': 'warn',
            'no-bitwise': 'warn',
            'no-caller': 'warn',
            'no-confusing-arrow': ['warn', { allowParens: true }],
            'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'off',
            'no-const-assign': 'error',
            'no-constant-condition': 'off',
            'no-control-regex': 'warn',
            'no-debugger': 'warn',
            'no-dupe-class-members': 'error',
            'no-dupe-keys': 'error',
            'no-duplicate-imports': 'off',
            'no-empty': 'off',
            'no-eval': 'error',
            'no-ex-assign': 'warn',
            'no-extra-bind': 'warn',
            'no-extra-boolean-cast': 'warn',
            'no-extra-parens': 'off',
            'no-extra-semi': 'warn',
            'no-fallthrough': 'warn',
            'no-floating-decimal': 'warn',
            'no-func-assign': 'warn',
            'no-global-assign': 'error',
            'no-implied-eval': 'warn',
            'no-inner-declarations': 'off',
            'no-invalid-regexp': 'warn',
            'no-iterator': 'warn',
            'no-labels': 'warn',
            'no-lone-blocks': 'warn',
            'no-mixed-spaces-and-tabs': 'warn',
            'no-multi-spaces': 'off',
            'no-multi-str': 'off',
            'no-native-reassign': 'off',
            'no-negated-in-lhs': 'off',
            'no-new': 'warn',
            'no-new-func': 'error',
            'no-new-object': 'warn',
            'no-new-require': 'warn',
            'no-new-wrappers': 'warn',
            'no-obj-calls': 'warn',
            'no-octal': 'warn',
            'no-octal-escape': 'warn',
            'no-path-concat': 'warn',
            'no-proto': 'warn',
            'no-redeclare': 'off',
            'no-regex-spaces': 'warn',
            'no-return-assign': 'warn',
            'no-script-url': 'warn',
            'no-self-compare': 'warn',
            'no-sequences': 'warn',
            'no-shadow': 'warn',
            'no-shadow-restricted-names': 'warn',
            'no-sparse-arrays': 'warn',
            'no-trailing-spaces': 'warn',
            'no-undef': 'error',
            'no-undef-init': 'warn',
            'no-undefined': 'off',
            'no-unreachable': 'error',
            'no-unused-expressions': 'off',
            'no-unused-vars': ['warn', { args: 'after-used', ignoreRestSiblings: false, vars: 'all' }],
            'no-use-before-define': 'off',
            'no-useless-escape': 'warn',
            'no-with': 'warn',
            'object-curly-spacing': ['warn', 'always'],
            'operator-linebreak': [
                'error',
                'before',
                {
                    overrides: {
                        '&&': 'before',
                        '=': 'none',
                        '||': 'before',
                    },
                },
            ],
            'prefer-destructuring': ['warn', { array: false, object: true }],
            'quote-props': 'off',
            quotes: ['warn', 'single', { avoidEscape: true }],
            radix: 'warn',
            'react-hooks/exhaustive-deps': 'warn',
            // 'react-hooks/exhaustive-deps': ['warn', { enableDangerousAutofixThisMayCauseInfiniteLoops: true }],
            'react-hooks/rules-of-hooks': 'error',
            'react/display-name': 'off',
            'react/jsx-boolean-value': 'off',
            'react/jsx-curly-spacing': ['warn', { children: true, when: 'never' }],
            'react/jsx-first-prop-new-line': ['warn', 'multiline'],
            'react/jsx-max-props-per-line': ['warn', { when: 'multiline' }],
            'react/jsx-no-comment-textnodes': 'error',
            'react/jsx-no-duplicate-props': 'error',
            'react/jsx-no-undef': 'error',
            'react/jsx-sort-props': 'off',
            'react/jsx-uses-react': 'warn',
            'react/jsx-uses-vars': 'warn',
            'react/no-did-mount-set-state': 'warn',
            'react/no-did-update-set-state': 'warn',
            'react/no-multi-comp': 'off',
            'react/no-string-refs': 'error',
            'react/no-unknown-property': 'off',
            'react/no-unstable-nested-components': 'warn',
            'react/prop-types': 'off',
            'react/react-in-jsx-scope': 'off',
            'react/self-closing-comp': 'warn',
            'react/wrap-multilines': 'off',
            semi: 'warn',
            'semi-spacing': 'warn',
            'sort-vars': 'off',
            'space-in-parens': 'off',
            'space-infix-ops': 'warn',
            'space-unary-ops': ['warn', { nonwords: false, words: true }],
            'unused-imports/no-unused-imports': 'error',
            'unused-imports/no-unused-vars': [
                'warn',
                {
                    args: 'after-used',
                    argsIgnorePattern: '^_',
                    vars: 'all',
                    varsIgnorePattern: '^_',
                },
            ],
            yoda: 'warn',
        },
        settings: {
            'import/ignore': ['react-navigation'],
            'import/resolver': {
                typescript: {
                    project: path.resolve(__dirname, 'tsconfig.json'),
                },
            },
            react: {
                version: 'detect',
            },
        },
    },
];
